#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class IndexMetadata(object):
    """
    Attributes:
     - catalog
     - database
     - table
     - file
     - rowGroupOffset
     - columnName
     - filterExpressionHash
     - objectStorePath
     - indexType
     - hitCounter
     - headers

    """
    thrift_spec = None


    def __init__(self, catalog = None, database = None, table = None, file = None, rowGroupOffset = None, columnName = None, filterExpressionHash = None, objectStorePath = None, indexType = None, hitCounter = None, headers = None,):
        self.catalog = catalog
        self.database = database
        self.table = table
        self.file = file
        self.rowGroupOffset = rowGroupOffset
        self.columnName = columnName
        self.filterExpressionHash = filterExpressionHash
        self.objectStorePath = objectStorePath
        self.indexType = indexType
        self.hitCounter = hitCounter
        self.headers = headers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalog = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.database = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.file = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.rowGroupOffset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.filterExpressionHash = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.objectStorePath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.indexType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.hitCounter = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.headers = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.headers[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IndexMetadata')
        if self.catalog is not None:
            oprot.writeFieldBegin('catalog', TType.STRING, 1)
            oprot.writeString(self.catalog.encode('utf-8') if sys.version_info[0] == 2 else self.catalog)
            oprot.writeFieldEnd()
        if self.database is not None:
            oprot.writeFieldBegin('database', TType.STRING, 2)
            oprot.writeString(self.database.encode('utf-8') if sys.version_info[0] == 2 else self.database)
            oprot.writeFieldEnd()
        if self.table is not None:
            oprot.writeFieldBegin('table', TType.STRING, 3)
            oprot.writeString(self.table.encode('utf-8') if sys.version_info[0] == 2 else self.table)
            oprot.writeFieldEnd()
        if self.file is not None:
            oprot.writeFieldBegin('file', TType.STRING, 4)
            oprot.writeString(self.file.encode('utf-8') if sys.version_info[0] == 2 else self.file)
            oprot.writeFieldEnd()
        if self.rowGroupOffset is not None:
            oprot.writeFieldBegin('rowGroupOffset', TType.I64, 5)
            oprot.writeI64(self.rowGroupOffset)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 6)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        if self.filterExpressionHash is not None:
            oprot.writeFieldBegin('filterExpressionHash', TType.STRING, 7)
            oprot.writeString(self.filterExpressionHash.encode('utf-8') if sys.version_info[0] == 2 else self.filterExpressionHash)
            oprot.writeFieldEnd()
        if self.objectStorePath is not None:
            oprot.writeFieldBegin('objectStorePath', TType.STRING, 8)
            oprot.writeString(self.objectStorePath.encode('utf-8') if sys.version_info[0] == 2 else self.objectStorePath)
            oprot.writeFieldEnd()
        if self.indexType is not None:
            oprot.writeFieldBegin('indexType', TType.STRING, 9)
            oprot.writeString(self.indexType.encode('utf-8') if sys.version_info[0] == 2 else self.indexType)
            oprot.writeFieldEnd()
        if self.hitCounter is not None:
            oprot.writeFieldBegin('hitCounter', TType.I64, 10)
            oprot.writeI64(self.hitCounter)
            oprot.writeFieldEnd()
        if self.headers is not None:
            oprot.writeFieldBegin('headers', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.headers))
            for kiter7, viter8 in self.headers.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(IndexMetadata)
IndexMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'catalog', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'database', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'file', 'UTF8', None, ),  # 4
    (5, TType.I64, 'rowGroupOffset', None, None, ),  # 5
    (6, TType.STRING, 'columnName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'filterExpressionHash', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'objectStorePath', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'indexType', 'UTF8', None, ),  # 9
    (10, TType.I64, 'hitCounter', None, None, ),  # 10
    (11, TType.MAP, 'headers', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 11
)
fix_spec(all_structs)
del all_structs
