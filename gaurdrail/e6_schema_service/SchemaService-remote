#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from e6_schema_service import SchemaService
from e6_schema_service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   getDBNamesForCatalog(string catalogName, ConnectionMetadata connectionMetadata)')
    print('   getTableNamesForDB(string catalogName, string dbName, ConnectionMetadata connectionMetadata)')
    print('   getTableMetadataForTables(string catalogName, string dbName,  tableNames, ConnectionMetadata connectionMetadata)')
    print('  void getDBNames(string catalogName, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTableNames(string catalogName, string dbName, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTableMetadata(string catalogName, string dbName,  tableNames, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTableStatistics(string catalogName, string dbName, string tableName, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTablePartitions(string catalogName, string dbName, string tableName, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTableFilePaths(string catalogName, string dbName, string tableName,  partitions, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getFileMetadata( fileStatus, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getAdditionalData(string catalogName, string dbName, string tableName,  partitions, ConnectionMetadata connectionMetadata, i64 snopShotVersion, RequestContext requestContext)')
    print('  CalculatedStats calculateStats(string catalogName, string dbName, string tableName,  columnNames,  partFilesToAnalyze, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('  void getTablePartitionsForDelta(string catalogName, string dbName, string tableName, DeltaTablePartitionInfo deltaTablePartitionInfo, TableVersionInfo tableVersionInfo, ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('   getMetastoreUsers(ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('   getMetastoreGroups(ConnectionMetadata connectionMetadata, RequestContext requestContext)')
    print('   getMetastorePermissions_catalog(ConnectionMetadata connectionMetadata, RequestContext requestContext, string catalog)')
    print('   getMetastorePermissions_schema(ConnectionMetadata connectionMetadata, RequestContext requestContext, string catalog, string schema)')
    print('   getMetastorePermissions_table(ConnectionMetadata connectionMetadata, RequestContext requestContext, string catalog, string schema, string table)')
    print('  void createView(ConnectionMetadata connectionMetadata, string catalogName, string dbName, string tableName, RequestContext requestContext, string bytes)')
    print('  void updateView(ConnectionMetadata connectionMetadata, string catalogName, string databaseName, string tableName, string bytes, RequestContext requestContext)')
    print('  void dropView(ConnectionMetadata connectionMetadata, string catalogName, string dbName, string tableName, RequestContext requestContext)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = SchemaService.Client(protocol)
transport.open()

if cmd == 'getDBNamesForCatalog':
    if len(args) != 2:
        print('getDBNamesForCatalog requires 2 args')
        sys.exit(1)
    pp.pprint(client.getDBNamesForCatalog(args[0], eval(args[1]),))

elif cmd == 'getTableNamesForDB':
    if len(args) != 3:
        print('getTableNamesForDB requires 3 args')
        sys.exit(1)
    pp.pprint(client.getTableNamesForDB(args[0], args[1], eval(args[2]),))

elif cmd == 'getTableMetadataForTables':
    if len(args) != 4:
        print('getTableMetadataForTables requires 4 args')
        sys.exit(1)
    pp.pprint(client.getTableMetadataForTables(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'getDBNames':
    if len(args) != 3:
        print('getDBNames requires 3 args')
        sys.exit(1)
    pp.pprint(client.getDBNames(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getTableNames':
    if len(args) != 4:
        print('getTableNames requires 4 args')
        sys.exit(1)
    pp.pprint(client.getTableNames(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'getTableMetadata':
    if len(args) != 5:
        print('getTableMetadata requires 5 args')
        sys.exit(1)
    pp.pprint(client.getTableMetadata(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'getTableStatistics':
    if len(args) != 5:
        print('getTableStatistics requires 5 args')
        sys.exit(1)
    pp.pprint(client.getTableStatistics(args[0], args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'getTablePartitions':
    if len(args) != 5:
        print('getTablePartitions requires 5 args')
        sys.exit(1)
    pp.pprint(client.getTablePartitions(args[0], args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'getTableFilePaths':
    if len(args) != 6:
        print('getTableFilePaths requires 6 args')
        sys.exit(1)
    pp.pprint(client.getTableFilePaths(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'getFileMetadata':
    if len(args) != 3:
        print('getFileMetadata requires 3 args')
        sys.exit(1)
    pp.pprint(client.getFileMetadata(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAdditionalData':
    if len(args) != 7:
        print('getAdditionalData requires 7 args')
        sys.exit(1)
    pp.pprint(client.getAdditionalData(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'calculateStats':
    if len(args) != 7:
        print('calculateStats requires 7 args')
        sys.exit(1)
    pp.pprint(client.calculateStats(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'getTablePartitionsForDelta':
    if len(args) != 7:
        print('getTablePartitionsForDelta requires 7 args')
        sys.exit(1)
    pp.pprint(client.getTablePartitionsForDelta(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'getMetastoreUsers':
    if len(args) != 2:
        print('getMetastoreUsers requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMetastoreUsers(eval(args[0]), eval(args[1]),))

elif cmd == 'getMetastoreGroups':
    if len(args) != 2:
        print('getMetastoreGroups requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMetastoreGroups(eval(args[0]), eval(args[1]),))

elif cmd == 'getMetastorePermissions_catalog':
    if len(args) != 3:
        print('getMetastorePermissions_catalog requires 3 args')
        sys.exit(1)
    pp.pprint(client.getMetastorePermissions_catalog(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getMetastorePermissions_schema':
    if len(args) != 4:
        print('getMetastorePermissions_schema requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMetastorePermissions_schema(eval(args[0]), eval(args[1]), args[2], args[3],))

elif cmd == 'getMetastorePermissions_table':
    if len(args) != 5:
        print('getMetastorePermissions_table requires 5 args')
        sys.exit(1)
    pp.pprint(client.getMetastorePermissions_table(eval(args[0]), eval(args[1]), args[2], args[3], args[4],))

elif cmd == 'createView':
    if len(args) != 6:
        print('createView requires 6 args')
        sys.exit(1)
    pp.pprint(client.createView(eval(args[0]), args[1], args[2], args[3], eval(args[4]), args[5],))

elif cmd == 'updateView':
    if len(args) != 6:
        print('updateView requires 6 args')
        sys.exit(1)
    pp.pprint(client.updateView(eval(args[0]), args[1], args[2], args[3], args[4], eval(args[5]),))

elif cmd == 'dropView':
    if len(args) != 5:
        print('dropView requires 5 args')
        sys.exit(1)
    pp.pprint(client.dropView(eval(args[0]), args[1], args[2], args[3], eval(args[4]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
