#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport

all_structs = []


class RequestStatus(object):
    SUCCESS = 0
    FAILURE = 1
    REQUEST = 2

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "FAILURE",
        2: "REQUEST",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "FAILURE": 1,
        "REQUEST": 2,
    }


class SchemaServiceException(TException):
    """
    Attributes:
     - reason

    """

    thrift_spec = None

    def __init__(
        self,
        reason=None,
    ):
        super(SchemaServiceException, self).__setattr__("reason", reason)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.reason,))

    @classmethod
    def read(cls, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and cls.thrift_spec is not None
        ):
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        reason = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    reason = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            reason=reason,
        )

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("SchemaServiceException")
        if self.reason is not None:
            oprot.writeFieldBegin("reason", TType.STRING, 1)
            oprot.writeString(
                self.reason.encode("utf-8") if sys.version_info[0] == 2 else self.reason
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileStatus(object):
    """
    Attributes:
     - filePath
     - fileSize

    """

    thrift_spec = None

    def __init__(
        self,
        filePath=None,
        fileSize=None,
    ):
        self.filePath = filePath
        self.fileSize = fileSize

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.filePath = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fileSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("FileStatus")
        if self.filePath is not None:
            oprot.writeFieldBegin("filePath", TType.STRING, 1)
            oprot.writeString(
                self.filePath.encode("utf-8") if sys.version_info[0] == 2 else self.filePath
            )
            oprot.writeFieldEnd()
        if self.fileSize is not None:
            oprot.writeFieldBegin("fileSize", TType.I64, 2)
            oprot.writeI64(self.fileSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConnectionMetadata(object):
    """
    Attributes:
     - catalogType
     - catalogConnection
     - cloudType
     - cloudSettings

    """

    thrift_spec = None

    def __init__(
        self,
        catalogType=None,
        catalogConnection=None,
        cloudType=None,
        cloudSettings=None,
    ):
        self.catalogType = catalogType
        self.catalogConnection = catalogConnection
        self.cloudType = cloudType
        self.cloudSettings = cloudSettings

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalogType = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.catalogConnection = CatalogConnectionMetadata()
                    self.catalogConnection.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cloudType = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.cloudSettings = CloudSettings()
                    self.cloudSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("ConnectionMetadata")
        if self.catalogType is not None:
            oprot.writeFieldBegin("catalogType", TType.STRING, 1)
            oprot.writeString(
                self.catalogType.encode("utf-8") if sys.version_info[0] == 2 else self.catalogType
            )
            oprot.writeFieldEnd()
        if self.catalogConnection is not None:
            oprot.writeFieldBegin("catalogConnection", TType.STRUCT, 2)
            self.catalogConnection.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudType is not None:
            oprot.writeFieldBegin("cloudType", TType.STRING, 3)
            oprot.writeString(
                self.cloudType.encode("utf-8") if sys.version_info[0] == 2 else self.cloudType
            )
            oprot.writeFieldEnd()
        if self.cloudSettings is not None:
            oprot.writeFieldBegin("cloudSettings", TType.STRUCT, 4)
            self.cloudSettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CatalogConnectionMetadata(object):
    """
    Attributes:
     - hiveConnection
     - glueConnection
     - unityConnection
     - fabricConnection

    """

    thrift_spec = None

    def __init__(
        self,
        hiveConnection=None,
        glueConnection=None,
        unityConnection=None,
        fabricConnection=None,
    ):
        self.hiveConnection = hiveConnection
        self.glueConnection = glueConnection
        self.unityConnection = unityConnection
        self.fabricConnection = fabricConnection

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.hiveConnection = HiveConnectionMetadata()
                    self.hiveConnection.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.glueConnection = GlueConnectionMetadata()
                    self.glueConnection.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unityConnection = UnityConnectionMetadata()
                    self.unityConnection.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.fabricConnection = FabricConnectionMetadata()
                    self.fabricConnection.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("CatalogConnectionMetadata")
        if self.hiveConnection is not None:
            oprot.writeFieldBegin("hiveConnection", TType.STRUCT, 1)
            self.hiveConnection.write(oprot)
            oprot.writeFieldEnd()
        if self.glueConnection is not None:
            oprot.writeFieldBegin("glueConnection", TType.STRUCT, 2)
            self.glueConnection.write(oprot)
            oprot.writeFieldEnd()
        if self.unityConnection is not None:
            oprot.writeFieldBegin("unityConnection", TType.STRUCT, 3)
            self.unityConnection.write(oprot)
            oprot.writeFieldEnd()
        if self.fabricConnection is not None:
            oprot.writeFieldBegin("fabricConnection", TType.STRUCT, 4)
            self.fabricConnection.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HiveConnectionMetadata(object):
    """
    Attributes:
     - host
     - port

    """

    thrift_spec = None

    def __init__(
        self,
        host=None,
        port=None,
    ):
        self.host = host
        self.port = port

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("HiveConnectionMetadata")
        if self.host is not None:
            oprot.writeFieldBegin("host", TType.STRING, 1)
            oprot.writeString(self.host.encode("utf-8") if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin("port", TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GlueConnectionMetadata(object):
    """
    Attributes:
     - region
     - catalogId

    """

    thrift_spec = None

    def __init__(
        self,
        region=None,
        catalogId=None,
    ):
        self.region = region
        self.catalogId = catalogId

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.region = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.catalogId = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("GlueConnectionMetadata")
        if self.region is not None:
            oprot.writeFieldBegin("region", TType.STRING, 1)
            oprot.writeString(
                self.region.encode("utf-8") if sys.version_info[0] == 2 else self.region
            )
            oprot.writeFieldEnd()
        if self.catalogId is not None:
            oprot.writeFieldBegin("catalogId", TType.STRING, 2)
            oprot.writeString(
                self.catalogId.encode("utf-8") if sys.version_info[0] == 2 else self.catalogId
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnityConnectionMetadata(object):
    """
    Attributes:
     - host
     - bearerToken
     - catalogName
     - adminUserName
     - adminPassword
     - accountId

    """

    thrift_spec = None

    def __init__(
        self,
        host=None,
        bearerToken=None,
        catalogName=None,
        adminUserName=None,
        adminPassword=None,
        accountId=None,
    ):
        self.host = host
        self.bearerToken = bearerToken
        self.catalogName = catalogName
        self.adminUserName = adminUserName
        self.adminPassword = adminPassword
        self.accountId = accountId

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.bearerToken = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.catalogName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.adminUserName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.adminPassword = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.accountId = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("UnityConnectionMetadata")
        if self.host is not None:
            oprot.writeFieldBegin("host", TType.STRING, 1)
            oprot.writeString(self.host.encode("utf-8") if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.bearerToken is not None:
            oprot.writeFieldBegin("bearerToken", TType.STRING, 2)
            oprot.writeString(
                self.bearerToken.encode("utf-8") if sys.version_info[0] == 2 else self.bearerToken
            )
            oprot.writeFieldEnd()
        if self.catalogName is not None:
            oprot.writeFieldBegin("catalogName", TType.STRING, 3)
            oprot.writeString(
                self.catalogName.encode("utf-8") if sys.version_info[0] == 2 else self.catalogName
            )
            oprot.writeFieldEnd()
        if self.adminUserName is not None:
            oprot.writeFieldBegin("adminUserName", TType.STRING, 4)
            oprot.writeString(
                self.adminUserName.encode("utf-8")
                if sys.version_info[0] == 2
                else self.adminUserName
            )
            oprot.writeFieldEnd()
        if self.adminPassword is not None:
            oprot.writeFieldBegin("adminPassword", TType.STRING, 5)
            oprot.writeString(
                self.adminPassword.encode("utf-8")
                if sys.version_info[0] == 2
                else self.adminPassword
            )
            oprot.writeFieldEnd()
        if self.accountId is not None:
            oprot.writeFieldBegin("accountId", TType.STRING, 6)
            oprot.writeString(
                self.accountId.encode("utf-8") if sys.version_info[0] == 2 else self.accountId
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FabricConnectionMetadata(object):
    """
    Attributes:
     - workspaceId
     - bearerToken

    """

    thrift_spec = None

    def __init__(
        self,
        workspaceId=None,
        bearerToken=None,
    ):
        self.workspaceId = workspaceId
        self.bearerToken = bearerToken

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.workspaceId = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.bearerToken = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("FabricConnectionMetadata")
        if self.workspaceId is not None:
            oprot.writeFieldBegin("workspaceId", TType.STRING, 1)
            oprot.writeString(
                self.workspaceId.encode("utf-8") if sys.version_info[0] == 2 else self.workspaceId
            )
            oprot.writeFieldEnd()
        if self.bearerToken is not None:
            oprot.writeFieldBegin("bearerToken", TType.STRING, 2)
            oprot.writeString(
                self.bearerToken.encode("utf-8") if sys.version_info[0] == 2 else self.bearerToken
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloudSettings(object):
    """
    Attributes:
     - awsSettings
     - gcpSettings
     - azureSettings
     - localSettings

    """

    thrift_spec = None

    def __init__(
        self,
        awsSettings=None,
        gcpSettings=None,
        azureSettings=None,
        localSettings=None,
    ):
        self.awsSettings = awsSettings
        self.gcpSettings = gcpSettings
        self.azureSettings = azureSettings
        self.localSettings = localSettings

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.awsSettings = AwsSettings()
                    self.awsSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.gcpSettings = GcpSettings()
                    self.gcpSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.azureSettings = AzureSettings()
                    self.azureSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.localSettings = LocalSettings()
                    self.localSettings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("CloudSettings")
        if self.awsSettings is not None:
            oprot.writeFieldBegin("awsSettings", TType.STRUCT, 1)
            self.awsSettings.write(oprot)
            oprot.writeFieldEnd()
        if self.gcpSettings is not None:
            oprot.writeFieldBegin("gcpSettings", TType.STRUCT, 2)
            self.gcpSettings.write(oprot)
            oprot.writeFieldEnd()
        if self.azureSettings is not None:
            oprot.writeFieldBegin("azureSettings", TType.STRUCT, 3)
            self.azureSettings.write(oprot)
            oprot.writeFieldEnd()
        if self.localSettings is not None:
            oprot.writeFieldBegin("localSettings", TType.STRUCT, 4)
            self.localSettings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AwsSettings(object):
    """
    Attributes:
     - assumedRole
     - assumedRoleName
     - region
     - externalId

    """

    thrift_spec = None

    def __init__(
        self,
        assumedRole=None,
        assumedRoleName=None,
        region="us-east-1",
        externalId="",
    ):
        self.assumedRole = assumedRole
        self.assumedRoleName = assumedRoleName
        self.region = region
        self.externalId = externalId

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.assumedRole = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.assumedRoleName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.region = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.externalId = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("AwsSettings")
        if self.assumedRole is not None:
            oprot.writeFieldBegin("assumedRole", TType.BOOL, 1)
            oprot.writeBool(self.assumedRole)
            oprot.writeFieldEnd()
        if self.assumedRoleName is not None:
            oprot.writeFieldBegin("assumedRoleName", TType.STRING, 2)
            oprot.writeString(
                self.assumedRoleName.encode("utf-8")
                if sys.version_info[0] == 2
                else self.assumedRoleName
            )
            oprot.writeFieldEnd()
        if self.region is not None:
            oprot.writeFieldBegin("region", TType.STRING, 3)
            oprot.writeString(
                self.region.encode("utf-8") if sys.version_info[0] == 2 else self.region
            )
            oprot.writeFieldEnd()
        if self.externalId is not None:
            oprot.writeFieldBegin("externalId", TType.STRING, 4)
            oprot.writeString(
                self.externalId.encode("utf-8") if sys.version_info[0] == 2 else self.externalId
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GcpSettings(object):
    thrift_spec = None

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("GcpSettings")
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AzureSettings(object):
    thrift_spec = None

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("AzureSettings")
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocalSettings(object):
    thrift_spec = None

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("LocalSettings")
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestContext(object):
    """
    Attributes:
     - hostName
     - hostPort
     - requestId
     - partNum
     - totalParts
     - requestStatus
     - error

    """

    thrift_spec = None

    def __init__(
        self,
        hostName=None,
        hostPort=None,
        requestId=None,
        partNum=None,
        totalParts=None,
        requestStatus=None,
        error=None,
    ):
        self.hostName = hostName
        self.hostPort = hostPort
        self.requestId = requestId
        self.partNum = partNum
        self.totalParts = totalParts
        self.requestStatus = requestStatus
        self.error = error

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.hostPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.requestId = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.partNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.totalParts = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.requestStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.error = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("RequestContext")
        if self.hostName is not None:
            oprot.writeFieldBegin("hostName", TType.STRING, 1)
            oprot.writeString(
                self.hostName.encode("utf-8") if sys.version_info[0] == 2 else self.hostName
            )
            oprot.writeFieldEnd()
        if self.hostPort is not None:
            oprot.writeFieldBegin("hostPort", TType.I32, 2)
            oprot.writeI32(self.hostPort)
            oprot.writeFieldEnd()
        if self.requestId is not None:
            oprot.writeFieldBegin("requestId", TType.STRING, 3)
            oprot.writeString(
                self.requestId.encode("utf-8") if sys.version_info[0] == 2 else self.requestId
            )
            oprot.writeFieldEnd()
        if self.partNum is not None:
            oprot.writeFieldBegin("partNum", TType.I32, 4)
            oprot.writeI32(self.partNum)
            oprot.writeFieldEnd()
        if self.totalParts is not None:
            oprot.writeFieldBegin("totalParts", TType.I32, 5)
            oprot.writeI32(self.totalParts)
            oprot.writeFieldEnd()
        if self.requestStatus is not None:
            oprot.writeFieldBegin("requestStatus", TType.I32, 6)
            oprot.writeI32(self.requestStatus)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin("error", TType.STRING, 7)
            oprot.writeString(
                self.error.encode("utf-8") if sys.version_info[0] == 2 else self.error
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TableMetadataResponse(object):
    """
    Attributes:
     - tableName
     - tableType
     - columnNames
     - columnTypes
     - error

    """

    thrift_spec = None

    def __init__(
        self,
        tableName=None,
        tableType=None,
        columnNames=None,
        columnTypes=None,
        error=None,
    ):
        self.tableName = tableName
        self.tableType = tableType
        self.columnNames = columnNames
        self.columnTypes = columnTypes
        self.error = error

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tableName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tableType = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.columnNames = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.columnNames.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.columnTypes = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.columnTypes.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.error = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("TableMetadataResponse")
        if self.tableName is not None:
            oprot.writeFieldBegin("tableName", TType.STRING, 1)
            oprot.writeString(
                self.tableName.encode("utf-8") if sys.version_info[0] == 2 else self.tableName
            )
            oprot.writeFieldEnd()
        if self.tableType is not None:
            oprot.writeFieldBegin("tableType", TType.STRING, 2)
            oprot.writeString(
                self.tableType.encode("utf-8") if sys.version_info[0] == 2 else self.tableType
            )
            oprot.writeFieldEnd()
        if self.columnNames is not None:
            oprot.writeFieldBegin("columnNames", TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.columnNames))
            for iter12 in self.columnNames:
                oprot.writeString(iter12.encode("utf-8") if sys.version_info[0] == 2 else iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.columnTypes is not None:
            oprot.writeFieldBegin("columnTypes", TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.columnTypes))
            for iter13 in self.columnTypes:
                oprot.writeString(iter13.encode("utf-8") if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin("error", TType.STRING, 5)
            oprot.writeString(
                self.error.encode("utf-8") if sys.version_info[0] == 2 else self.error
            )
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeltaTablePartitionInfo(object):
    """
    Attributes:
     - lastKnownCheckpointVersion
     - lastKnownLogVersion
     - absoluteTablePath
     - tableMetadata

    """

    thrift_spec = None

    def __init__(
        self,
        lastKnownCheckpointVersion=None,
        lastKnownLogVersion=None,
        absoluteTablePath=None,
        tableMetadata=None,
    ):
        self.lastKnownCheckpointVersion = lastKnownCheckpointVersion
        self.lastKnownLogVersion = lastKnownLogVersion
        self.absoluteTablePath = absoluteTablePath
        self.tableMetadata = tableMetadata

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lastKnownCheckpointVersion = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastKnownLogVersion = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.absoluteTablePath = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tableMetadata = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("DeltaTablePartitionInfo")
        if self.lastKnownCheckpointVersion is not None:
            oprot.writeFieldBegin("lastKnownCheckpointVersion", TType.I64, 1)
            oprot.writeI64(self.lastKnownCheckpointVersion)
            oprot.writeFieldEnd()
        if self.lastKnownLogVersion is not None:
            oprot.writeFieldBegin("lastKnownLogVersion", TType.I64, 2)
            oprot.writeI64(self.lastKnownLogVersion)
            oprot.writeFieldEnd()
        if self.absoluteTablePath is not None:
            oprot.writeFieldBegin("absoluteTablePath", TType.STRING, 3)
            oprot.writeString(
                self.absoluteTablePath.encode("utf-8")
                if sys.version_info[0] == 2
                else self.absoluteTablePath
            )
            oprot.writeFieldEnd()
        if self.tableMetadata is not None:
            oprot.writeFieldBegin("tableMetadata", TType.STRING, 4)
            oprot.writeBinary(self.tableMetadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetastoreUser(object):
    """
    Attributes:
     - name
     - firstName
     - lastName
     - emailAddress
     - id
     - groupNames
     - groupIds

    """

    thrift_spec = None

    def __init__(
        self,
        name=None,
        firstName=None,
        lastName=None,
        emailAddress=None,
        id=None,
        groupNames=None,
        groupIds=None,
    ):
        self.name = name
        self.firstName = firstName
        self.lastName = lastName
        self.emailAddress = emailAddress
        self.id = id
        self.groupNames = groupNames
        self.groupIds = groupIds

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.firstName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lastName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.emailAddress = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.groupNames = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.groupNames.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.groupIds = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.groupIds.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("MetastoreUser")
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 1)
            oprot.writeString(self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.firstName is not None:
            oprot.writeFieldBegin("firstName", TType.STRING, 2)
            oprot.writeString(
                self.firstName.encode("utf-8") if sys.version_info[0] == 2 else self.firstName
            )
            oprot.writeFieldEnd()
        if self.lastName is not None:
            oprot.writeFieldBegin("lastName", TType.STRING, 3)
            oprot.writeString(
                self.lastName.encode("utf-8") if sys.version_info[0] == 2 else self.lastName
            )
            oprot.writeFieldEnd()
        if self.emailAddress is not None:
            oprot.writeFieldBegin("emailAddress", TType.STRING, 4)
            oprot.writeString(
                self.emailAddress.encode("utf-8") if sys.version_info[0] == 2 else self.emailAddress
            )
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.STRING, 5)
            oprot.writeString(self.id.encode("utf-8") if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.groupNames is not None:
            oprot.writeFieldBegin("groupNames", TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.groupNames))
            for iter26 in self.groupNames:
                oprot.writeString(iter26.encode("utf-8") if sys.version_info[0] == 2 else iter26)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.groupIds is not None:
            oprot.writeFieldBegin("groupIds", TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.groupIds))
            for iter27 in self.groupIds:
                oprot.writeString(iter27.encode("utf-8") if sys.version_info[0] == 2 else iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetastoreGroup(object):
    """
    Attributes:
     - name
     - id
     - userNames
     - userIds

    """

    thrift_spec = None

    def __init__(
        self,
        name=None,
        id=None,
        userNames=None,
        userIds=None,
    ):
        self.name = name
        self.id = id
        self.userNames = userNames
        self.userIds = userIds

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.userNames = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.userNames.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.userIds = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.userIds.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("MetastoreGroup")
        if self.name is not None:
            oprot.writeFieldBegin("name", TType.STRING, 1)
            oprot.writeString(self.name.encode("utf-8") if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin("id", TType.STRING, 2)
            oprot.writeString(self.id.encode("utf-8") if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.userNames is not None:
            oprot.writeFieldBegin("userNames", TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.userNames))
            for iter40 in self.userNames:
                oprot.writeString(iter40.encode("utf-8") if sys.version_info[0] == 2 else iter40)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userIds is not None:
            oprot.writeFieldBegin("userIds", TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.userIds))
            for iter41 in self.userIds:
                oprot.writeString(iter41.encode("utf-8") if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetastorePermission(object):
    """
    Attributes:
     - catalogName
     - schemaName
     - tableName
     - columns
     - isAllowed
     - privileges

    """

    thrift_spec = None

    def __init__(
        self,
        catalogName=None,
        schemaName=None,
        tableName=None,
        columns=None,
        isAllowed=True,
        privileges=None,
    ):
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.columns = columns
        self.isAllowed = isAllowed
        self.privileges = privileges

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalogName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemaName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        self.columns.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isAllowed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.privileges = {}
                    (_ktype49, _vtype50, _size48) = iprot.readMapBegin()
                    for _i52 in range(_size48):
                        _key53 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        _val54 = []
                        (_etype58, _size55) = iprot.readListBegin()
                        for _i59 in range(_size55):
                            _elem60 = (
                                iprot.readString().decode("utf-8", errors="replace")
                                if sys.version_info[0] == 2
                                else iprot.readString()
                            )
                            _val54.append(_elem60)
                        iprot.readListEnd()
                        self.privileges[_key53] = _val54
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("MetastorePermission")
        if self.catalogName is not None:
            oprot.writeFieldBegin("catalogName", TType.STRING, 1)
            oprot.writeString(
                self.catalogName.encode("utf-8") if sys.version_info[0] == 2 else self.catalogName
            )
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin("schemaName", TType.STRING, 2)
            oprot.writeString(
                self.schemaName.encode("utf-8") if sys.version_info[0] == 2 else self.schemaName
            )
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin("tableName", TType.STRING, 3)
            oprot.writeString(
                self.tableName.encode("utf-8") if sys.version_info[0] == 2 else self.tableName
            )
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin("columns", TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.columns))
            for iter61 in self.columns:
                oprot.writeString(iter61.encode("utf-8") if sys.version_info[0] == 2 else iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isAllowed is not None:
            oprot.writeFieldBegin("isAllowed", TType.BOOL, 5)
            oprot.writeBool(self.isAllowed)
            oprot.writeFieldEnd()
        if self.privileges is not None:
            oprot.writeFieldBegin("privileges", TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.privileges))
            for kiter62, viter63 in self.privileges.items():
                oprot.writeString(kiter62.encode("utf-8") if sys.version_info[0] == 2 else kiter62)
                oprot.writeListBegin(TType.STRING, len(viter63))
                for iter64 in viter63:
                    oprot.writeString(
                        iter64.encode("utf-8") if sys.version_info[0] == 2 else iter64
                    )
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CalculatedStats(object):
    """
    Attributes:
     - catalogName
     - schemaName
     - tableName
     - ndvs

    """

    thrift_spec = None

    def __init__(
        self,
        catalogName=None,
        schemaName=None,
        tableName=None,
        ndvs=None,
    ):
        self.catalogName = catalogName
        self.schemaName = schemaName
        self.tableName = tableName
        self.ndvs = ndvs

    def read(self, iprot):
        if (
            iprot._fast_decode is not None
            and isinstance(iprot.trans, TTransport.CReadableTransport)
            and self.thrift_spec is not None
        ):
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.catalogName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemaName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tableName = (
                        iprot.readString().decode("utf-8", errors="replace")
                        if sys.version_info[0] == 2
                        else iprot.readString()
                    )
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.ndvs = {}
                    (_ktype66, _vtype67, _size65) = iprot.readMapBegin()
                    for _i69 in range(_size65):
                        _key70 = (
                            iprot.readString().decode("utf-8", errors="replace")
                            if sys.version_info[0] == 2
                            else iprot.readString()
                        )
                        _val71 = iprot.readI32()
                        self.ndvs[_key70] = _val71
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin("CalculatedStats")
        if self.catalogName is not None:
            oprot.writeFieldBegin("catalogName", TType.STRING, 1)
            oprot.writeString(
                self.catalogName.encode("utf-8") if sys.version_info[0] == 2 else self.catalogName
            )
            oprot.writeFieldEnd()
        if self.schemaName is not None:
            oprot.writeFieldBegin("schemaName", TType.STRING, 2)
            oprot.writeString(
                self.schemaName.encode("utf-8") if sys.version_info[0] == 2 else self.schemaName
            )
            oprot.writeFieldEnd()
        if self.tableName is not None:
            oprot.writeFieldBegin("tableName", TType.STRING, 3)
            oprot.writeString(
                self.tableName.encode("utf-8") if sys.version_info[0] == 2 else self.tableName
            )
            oprot.writeFieldEnd()
        if self.ndvs is not None:
            oprot.writeFieldBegin("ndvs", TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.ndvs))
            for kiter72, viter73 in self.ndvs.items():
                oprot.writeString(kiter72.encode("utf-8") if sys.version_info[0] == 2 else kiter72)
                oprot.writeI32(viter73)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ["%s=%r" % (key, value) for key, value in self.__dict__.items()]
        return "%s(%s)" % (self.__class__.__name__, ", ".join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


all_structs.append(SchemaServiceException)
SchemaServiceException.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "reason",
        "UTF8",
        None,
    ),  # 1
)
all_structs.append(FileStatus)
FileStatus.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "filePath",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.I64,
        "fileSize",
        None,
        None,
    ),  # 2
)
all_structs.append(ConnectionMetadata)
ConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "catalogType",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRUCT,
        "catalogConnection",
        [CatalogConnectionMetadata, None],
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "cloudType",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRUCT,
        "cloudSettings",
        [CloudSettings, None],
        None,
    ),  # 4
)
all_structs.append(CatalogConnectionMetadata)
CatalogConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "hiveConnection",
        [HiveConnectionMetadata, None],
        None,
    ),  # 1
    (
        2,
        TType.STRUCT,
        "glueConnection",
        [GlueConnectionMetadata, None],
        None,
    ),  # 2
    (
        3,
        TType.STRUCT,
        "unityConnection",
        [UnityConnectionMetadata, None],
        None,
    ),  # 3
    (
        4,
        TType.STRUCT,
        "fabricConnection",
        [FabricConnectionMetadata, None],
        None,
    ),  # 4
)
all_structs.append(HiveConnectionMetadata)
HiveConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "host",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "port",
        None,
        None,
    ),  # 2
)
all_structs.append(GlueConnectionMetadata)
GlueConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "region",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "catalogId",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(UnityConnectionMetadata)
UnityConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "host",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "bearerToken",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "catalogName",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "adminUserName",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "adminPassword",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.STRING,
        "accountId",
        "UTF8",
        None,
    ),  # 6
)
all_structs.append(FabricConnectionMetadata)
FabricConnectionMetadata.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "workspaceId",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "bearerToken",
        "UTF8",
        None,
    ),  # 2
)
all_structs.append(CloudSettings)
CloudSettings.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRUCT,
        "awsSettings",
        [AwsSettings, None],
        None,
    ),  # 1
    (
        2,
        TType.STRUCT,
        "gcpSettings",
        [GcpSettings, None],
        None,
    ),  # 2
    (
        3,
        TType.STRUCT,
        "azureSettings",
        [AzureSettings, None],
        None,
    ),  # 3
    (
        4,
        TType.STRUCT,
        "localSettings",
        [LocalSettings, None],
        None,
    ),  # 4
)
all_structs.append(AwsSettings)
AwsSettings.thrift_spec = (
    None,  # 0
    (
        1,
        TType.BOOL,
        "assumedRole",
        None,
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "assumedRoleName",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "region",
        "UTF8",
        "us-east-1",
    ),  # 3
    (
        4,
        TType.STRING,
        "externalId",
        "UTF8",
        "",
    ),  # 4
)
all_structs.append(GcpSettings)
GcpSettings.thrift_spec = ()
all_structs.append(AzureSettings)
AzureSettings.thrift_spec = ()
all_structs.append(LocalSettings)
LocalSettings.thrift_spec = ()
all_structs.append(RequestContext)
RequestContext.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "hostName",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.I32,
        "hostPort",
        None,
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "requestId",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.I32,
        "partNum",
        None,
        None,
    ),  # 4
    (
        5,
        TType.I32,
        "totalParts",
        None,
        None,
    ),  # 5
    (
        6,
        TType.I32,
        "requestStatus",
        None,
        None,
    ),  # 6
    (
        7,
        TType.STRING,
        "error",
        "UTF8",
        None,
    ),  # 7
)
all_structs.append(TableMetadataResponse)
TableMetadataResponse.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "tableName",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "tableType",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.LIST,
        "columnNames",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 3
    (
        4,
        TType.LIST,
        "columnTypes",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "error",
        "UTF8",
        None,
    ),  # 5
)
all_structs.append(DeltaTablePartitionInfo)
DeltaTablePartitionInfo.thrift_spec = (
    None,  # 0
    (
        1,
        TType.I64,
        "lastKnownCheckpointVersion",
        None,
        None,
    ),  # 1
    (
        2,
        TType.I64,
        "lastKnownLogVersion",
        None,
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "absoluteTablePath",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "tableMetadata",
        "BINARY",
        None,
    ),  # 4
)
all_structs.append(MetastoreUser)
MetastoreUser.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "firstName",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "lastName",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.STRING,
        "emailAddress",
        "UTF8",
        None,
    ),  # 4
    (
        5,
        TType.STRING,
        "id",
        "UTF8",
        None,
    ),  # 5
    (
        6,
        TType.LIST,
        "groupNames",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 6
    (
        7,
        TType.LIST,
        "groupIds",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 7
)
all_structs.append(MetastoreGroup)
MetastoreGroup.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "name",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "id",
        "UTF8",
        None,
    ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    (
        6,
        TType.LIST,
        "userNames",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 6
    (
        7,
        TType.LIST,
        "userIds",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 7
)
all_structs.append(MetastorePermission)
MetastorePermission.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "catalogName",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "schemaName",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "tableName",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.LIST,
        "columns",
        (TType.STRING, "UTF8", False),
        None,
    ),  # 4
    (
        5,
        TType.BOOL,
        "isAllowed",
        None,
        True,
    ),  # 5
    (
        6,
        TType.MAP,
        "privileges",
        (TType.STRING, "UTF8", TType.LIST, (TType.STRING, "UTF8", False), False),
        None,
    ),  # 6
)
all_structs.append(CalculatedStats)
CalculatedStats.thrift_spec = (
    None,  # 0
    (
        1,
        TType.STRING,
        "catalogName",
        "UTF8",
        None,
    ),  # 1
    (
        2,
        TType.STRING,
        "schemaName",
        "UTF8",
        None,
    ),  # 2
    (
        3,
        TType.STRING,
        "tableName",
        "UTF8",
        None,
    ),  # 3
    (
        4,
        TType.MAP,
        "ndvs",
        (TType.STRING, "UTF8", TType.I32, None, False),
        None,
    ),  # 4
)
fix_spec(all_structs)
del all_structs
