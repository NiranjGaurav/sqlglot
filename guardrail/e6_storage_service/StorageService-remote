#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint

if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from e6_storage_service import StorageService
from e6_storage_service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == "--help":
    print("")
    print(
        "Usage: "
        + sys.argv[0]
        + " [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]"
    )
    print("")
    print("Functions:")
    print("  ConnectionMetadata getConnectionMetadata(string catalogName)")
    print("   getCatalogNames()")
    print("   getDBNames(string catalogName)")
    print("   getTableNames(string catalogName, string dbName)")
    print("   getColumns(string catalogName, string dbName, string tableName)")
    print("  CatalogMetadata getColumnsForTables(string catalogName, string dbName,  tableName)")
    print("  CatalogMetadata getColumnsForAllTablesInDb(string catalogName, string dbName)")
    print("   getColumnsForAllTablesInCatalog(string catalogName)")
    print("   getCatalogNamesV2(UserContext userContext)")
    print("   getDBNamesV2(UserContext userContext, string catalogName)")
    print("   getTableNamesV2(UserContext userContext, string catalogName, string dbName)")
    print(
        "   getColumnsV2(UserContext userContext, string catalogName, string dbName, string tableName)"
    )
    print(
        "  CatalogMetadata getColumnsForTablesV2(UserContext userContext, string catalogName, string dbName,  tableName)"
    )
    print(
        "  CatalogMetadata getColumnsForAllTablesInDbV2(UserContext userContext, string catalogName, string dbName)"
    )
    print("   getColumnsForAllTablesInCatalogV2(UserContext userContext, string catalogName)")
    print(
        "  string getTableMetadata(string catalogName, string dbName, string tableName, string requestId)"
    )
    print("   getDBObjects(string catalogName, string dbName)")
    print("   getDBObjectsV2(UserContext userContext, string catalogName, string dbName)")
    print(
        "  string getTableStatistics(string catalogName, string dbName, string tableName, string requestId)"
    )
    print(
        "  TableStatistics getTableStatisticsV2(string catalogName, string dbName, string tableName, string requestId)"
    )
    print(
        "  GetTablePartitionsResponse getTablePartitionsAtVersion(string catalogName, string dbName, string tableName, string requestId, TableVersionInfo timeTravelInfo)"
    )
    print(
        "   getTablePartitionFileAndMetadataAtVersion(string catalogName, string dbName, string tableName,  partitions, string requestId, TableVersionInfo timeTravelInfo, bool shouldGetFileMetadata,  columnsWithStats, bool getStatsForAllColumns)"
    )
    print(
        "  GetTablePartitionsResponse getTablePartitions(string catalogName, string dbName, string tableName, string requestId, bool forceRefresh, i64 lastUpdateTimeFromCache)"
    )
    print(
        "   getTablePartitionFileAndMetadata(string catalogName, string dbName, string tableName,  partitions, string requestId, bool forcerefresh, bool shouldGetFileMetadata,  columnsWithStats, bool getStatsForAllColumns)"
    )
    print("  void putFileMetadata( partFiles, string requestId)")
    print("  BulkAddCatalogsResponse bulkAddCatalogs(string catalogsJson)")
    print("  StorageServiceRef refreshCatalog(string catalogName)")
    print("  AddOrRefreshCatalogResponse getAddOrRefreshCatalogResponse(string catalogName)")
    print("  BulkAddCatalogsResponse forceBulkAddCatalogs()")
    print("  StorageServiceRef refreshDBs(string catalogName,  dbName)")
    print("  RefreshDBsResponse getRefreshDBsResponse(string catalogName)")
    print("  void dropCatalog(string catalogName)")
    print("  void dBNamesCallback( dbNames, RequestContext requestContext)")
    print("  void tableNamesCallback( tableNames, RequestContext requestContext)")
    print("  void tablesCallback( listTablesCallback, RequestContext requestContext)")
    print("  void tableStatisticsCallback(string tableStats, RequestContext requestContext)")
    print("  void tablePartitionsCallback( partitions, RequestContext requestContext)")
    print(
        "  void deltaTablePartitionsCallback(DeltaTableChangeResponse deltaTableChangeResponse, RequestContext requestContext)"
    )
    print(
        "  void tablePartitionFilesCallback( mapPartitionNameAndFileMetadatas, RequestContext requestContext)"
    )
    print("  void tableFileMetadataCallback( listFileMetadata, RequestContext requestContext)")
    print(
        "  void getAdditionalDataCallback( mapPartitiontoDeletionVectors, RequestContext requestContext)"
    )
    print("  void upsertDBNames(string catalogName,  dbNames)")
    print("  void upsertTableNames(string catalogName, string dbName,  tableNames)")
    print("  void upsertTables(string catalogName, string dbName,  tables)")
    print(
        "  void upsertTableStatistics(string catalogName, string dbName, string tableName, string tableStats)"
    )
    print(
        "  void upsertTablePartitions(string catalogName, string dbName, string tableName,  partitions)"
    )
    print(
        "  void upsertTablePartitionFiles(string catalogName, string dbName, string tableName,  mapPartitionNameAndFileMetadata)"
    )
    print(
        "  void upsertTableFileMetadata(string catalogName, string dbName, string tableName, PartFile fileMetadata)"
    )
    print("   getCatalogDump(CatalogDumpRequest catalogDumpRequest)")
    print(
        "  void analyzeTable(string catalogName, string dbName, string tableName,  columnNames, string requestId)"
    )
    print(
        "  AnalyzedTableInfo getAnalyzedTableInfo(string catalogName, string dbName, string tableName, string requestId)"
    )
    print("   getHistoricalStats()")
    print("  void updateHBOCacheInStorage( stats)")
    print(
        "  void createView(string catalogName, string databaseName, string tableName, string requestId, string table)"
    )
    print(
        "  void updateView(string catalogName, string databaseName, string tableName, string table, string requestId)"
    )
    print(
        "  void alterView(string catalogName, string databaseName, string tableName, string requestId, string table)"
    )
    print(
        "  void dropView(string catalogName, string databaseName, string tableName, string requestId)"
    )
    print("")
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = "localhost"
port = 9090
uri = ""
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == "-h":
    parts = sys.argv[argi + 1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == "-u":
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(":")
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += "?%s" % url[4]
    http = True
    argi += 2

if sys.argv[argi] == "-f" or sys.argv[argi] == "-framed":
    framed = True
    argi += 1

if sys.argv[argi] == "-s" or sys.argv[argi] == "-ssl":
    ssl = True
    argi += 1

if sys.argv[argi] == "-novalidate":
    validate = False
    argi += 1

if sys.argv[argi] == "-ca_certs":
    ca_certs = sys.argv[argi + 1]
    argi += 2

if sys.argv[argi] == "-keyfile":
    keyfile = sys.argv[argi + 1]
    argi += 2

if sys.argv[argi] == "-certfile":
    certfile = sys.argv[argi + 1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1 :]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(
            host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile
        )
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = StorageService.Client(protocol)
transport.open()

if cmd == "getConnectionMetadata":
    if len(args) != 1:
        print("getConnectionMetadata requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getConnectionMetadata(
            args[0],
        )
    )

elif cmd == "getCatalogNames":
    if len(args) != 0:
        print("getCatalogNames requires 0 args")
        sys.exit(1)
    pp.pprint(client.getCatalogNames())

elif cmd == "getDBNames":
    if len(args) != 1:
        print("getDBNames requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getDBNames(
            args[0],
        )
    )

elif cmd == "getTableNames":
    if len(args) != 2:
        print("getTableNames requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getTableNames(
            args[0],
            args[1],
        )
    )

elif cmd == "getColumns":
    if len(args) != 3:
        print("getColumns requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.getColumns(
            args[0],
            args[1],
            args[2],
        )
    )

elif cmd == "getColumnsForTables":
    if len(args) != 3:
        print("getColumnsForTables requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForTables(
            args[0],
            args[1],
            eval(args[2]),
        )
    )

elif cmd == "getColumnsForAllTablesInDb":
    if len(args) != 2:
        print("getColumnsForAllTablesInDb requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForAllTablesInDb(
            args[0],
            args[1],
        )
    )

elif cmd == "getColumnsForAllTablesInCatalog":
    if len(args) != 1:
        print("getColumnsForAllTablesInCatalog requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForAllTablesInCatalog(
            args[0],
        )
    )

elif cmd == "getCatalogNamesV2":
    if len(args) != 1:
        print("getCatalogNamesV2 requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getCatalogNamesV2(
            eval(args[0]),
        )
    )

elif cmd == "getDBNamesV2":
    if len(args) != 2:
        print("getDBNamesV2 requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getDBNamesV2(
            eval(args[0]),
            args[1],
        )
    )

elif cmd == "getTableNamesV2":
    if len(args) != 3:
        print("getTableNamesV2 requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.getTableNamesV2(
            eval(args[0]),
            args[1],
            args[2],
        )
    )

elif cmd == "getColumnsV2":
    if len(args) != 4:
        print("getColumnsV2 requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsV2(
            eval(args[0]),
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "getColumnsForTablesV2":
    if len(args) != 4:
        print("getColumnsForTablesV2 requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForTablesV2(
            eval(args[0]),
            args[1],
            args[2],
            eval(args[3]),
        )
    )

elif cmd == "getColumnsForAllTablesInDbV2":
    if len(args) != 3:
        print("getColumnsForAllTablesInDbV2 requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForAllTablesInDbV2(
            eval(args[0]),
            args[1],
            args[2],
        )
    )

elif cmd == "getColumnsForAllTablesInCatalogV2":
    if len(args) != 2:
        print("getColumnsForAllTablesInCatalogV2 requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getColumnsForAllTablesInCatalogV2(
            eval(args[0]),
            args[1],
        )
    )

elif cmd == "getTableMetadata":
    if len(args) != 4:
        print("getTableMetadata requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getTableMetadata(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "getDBObjects":
    if len(args) != 2:
        print("getDBObjects requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getDBObjects(
            args[0],
            args[1],
        )
    )

elif cmd == "getDBObjectsV2":
    if len(args) != 3:
        print("getDBObjectsV2 requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.getDBObjectsV2(
            eval(args[0]),
            args[1],
            args[2],
        )
    )

elif cmd == "getTableStatistics":
    if len(args) != 4:
        print("getTableStatistics requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getTableStatistics(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "getTableStatisticsV2":
    if len(args) != 4:
        print("getTableStatisticsV2 requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getTableStatisticsV2(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "getTablePartitionsAtVersion":
    if len(args) != 5:
        print("getTablePartitionsAtVersion requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.getTablePartitionsAtVersion(
            args[0],
            args[1],
            args[2],
            args[3],
            eval(args[4]),
        )
    )

elif cmd == "getTablePartitionFileAndMetadataAtVersion":
    if len(args) != 9:
        print("getTablePartitionFileAndMetadataAtVersion requires 9 args")
        sys.exit(1)
    pp.pprint(
        client.getTablePartitionFileAndMetadataAtVersion(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
            args[4],
            eval(args[5]),
            eval(args[6]),
            eval(args[7]),
            eval(args[8]),
        )
    )

elif cmd == "getTablePartitions":
    if len(args) != 6:
        print("getTablePartitions requires 6 args")
        sys.exit(1)
    pp.pprint(
        client.getTablePartitions(
            args[0],
            args[1],
            args[2],
            args[3],
            eval(args[4]),
            eval(args[5]),
        )
    )

elif cmd == "getTablePartitionFileAndMetadata":
    if len(args) != 9:
        print("getTablePartitionFileAndMetadata requires 9 args")
        sys.exit(1)
    pp.pprint(
        client.getTablePartitionFileAndMetadata(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
            args[4],
            eval(args[5]),
            eval(args[6]),
            eval(args[7]),
            eval(args[8]),
        )
    )

elif cmd == "putFileMetadata":
    if len(args) != 2:
        print("putFileMetadata requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.putFileMetadata(
            eval(args[0]),
            args[1],
        )
    )

elif cmd == "bulkAddCatalogs":
    if len(args) != 1:
        print("bulkAddCatalogs requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.bulkAddCatalogs(
            args[0],
        )
    )

elif cmd == "refreshCatalog":
    if len(args) != 1:
        print("refreshCatalog requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.refreshCatalog(
            args[0],
        )
    )

elif cmd == "getAddOrRefreshCatalogResponse":
    if len(args) != 1:
        print("getAddOrRefreshCatalogResponse requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getAddOrRefreshCatalogResponse(
            args[0],
        )
    )

elif cmd == "forceBulkAddCatalogs":
    if len(args) != 0:
        print("forceBulkAddCatalogs requires 0 args")
        sys.exit(1)
    pp.pprint(client.forceBulkAddCatalogs())

elif cmd == "refreshDBs":
    if len(args) != 2:
        print("refreshDBs requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.refreshDBs(
            args[0],
            eval(args[1]),
        )
    )

elif cmd == "getRefreshDBsResponse":
    if len(args) != 1:
        print("getRefreshDBsResponse requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getRefreshDBsResponse(
            args[0],
        )
    )

elif cmd == "dropCatalog":
    if len(args) != 1:
        print("dropCatalog requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.dropCatalog(
            args[0],
        )
    )

elif cmd == "dBNamesCallback":
    if len(args) != 2:
        print("dBNamesCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.dBNamesCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "tableNamesCallback":
    if len(args) != 2:
        print("tableNamesCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tableNamesCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "tablesCallback":
    if len(args) != 2:
        print("tablesCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tablesCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "tableStatisticsCallback":
    if len(args) != 2:
        print("tableStatisticsCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tableStatisticsCallback(
            args[0],
            eval(args[1]),
        )
    )

elif cmd == "tablePartitionsCallback":
    if len(args) != 2:
        print("tablePartitionsCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tablePartitionsCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "deltaTablePartitionsCallback":
    if len(args) != 2:
        print("deltaTablePartitionsCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.deltaTablePartitionsCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "tablePartitionFilesCallback":
    if len(args) != 2:
        print("tablePartitionFilesCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tablePartitionFilesCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "tableFileMetadataCallback":
    if len(args) != 2:
        print("tableFileMetadataCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.tableFileMetadataCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "getAdditionalDataCallback":
    if len(args) != 2:
        print("getAdditionalDataCallback requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.getAdditionalDataCallback(
            eval(args[0]),
            eval(args[1]),
        )
    )

elif cmd == "upsertDBNames":
    if len(args) != 2:
        print("upsertDBNames requires 2 args")
        sys.exit(1)
    pp.pprint(
        client.upsertDBNames(
            args[0],
            eval(args[1]),
        )
    )

elif cmd == "upsertTableNames":
    if len(args) != 3:
        print("upsertTableNames requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTableNames(
            args[0],
            args[1],
            eval(args[2]),
        )
    )

elif cmd == "upsertTables":
    if len(args) != 3:
        print("upsertTables requires 3 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTables(
            args[0],
            args[1],
            eval(args[2]),
        )
    )

elif cmd == "upsertTableStatistics":
    if len(args) != 4:
        print("upsertTableStatistics requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTableStatistics(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "upsertTablePartitions":
    if len(args) != 4:
        print("upsertTablePartitions requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTablePartitions(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
        )
    )

elif cmd == "upsertTablePartitionFiles":
    if len(args) != 4:
        print("upsertTablePartitionFiles requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTablePartitionFiles(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
        )
    )

elif cmd == "upsertTableFileMetadata":
    if len(args) != 4:
        print("upsertTableFileMetadata requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.upsertTableFileMetadata(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
        )
    )

elif cmd == "getCatalogDump":
    if len(args) != 1:
        print("getCatalogDump requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.getCatalogDump(
            eval(args[0]),
        )
    )

elif cmd == "analyzeTable":
    if len(args) != 5:
        print("analyzeTable requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.analyzeTable(
            args[0],
            args[1],
            args[2],
            eval(args[3]),
            args[4],
        )
    )

elif cmd == "getAnalyzedTableInfo":
    if len(args) != 4:
        print("getAnalyzedTableInfo requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.getAnalyzedTableInfo(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

elif cmd == "getHistoricalStats":
    if len(args) != 0:
        print("getHistoricalStats requires 0 args")
        sys.exit(1)
    pp.pprint(client.getHistoricalStats())

elif cmd == "updateHBOCacheInStorage":
    if len(args) != 1:
        print("updateHBOCacheInStorage requires 1 args")
        sys.exit(1)
    pp.pprint(
        client.updateHBOCacheInStorage(
            eval(args[0]),
        )
    )

elif cmd == "createView":
    if len(args) != 5:
        print("createView requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.createView(
            args[0],
            args[1],
            args[2],
            args[3],
            args[4],
        )
    )

elif cmd == "updateView":
    if len(args) != 5:
        print("updateView requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.updateView(
            args[0],
            args[1],
            args[2],
            args[3],
            args[4],
        )
    )

elif cmd == "alterView":
    if len(args) != 5:
        print("alterView requires 5 args")
        sys.exit(1)
    pp.pprint(
        client.alterView(
            args[0],
            args[1],
            args[2],
            args[3],
            args[4],
        )
    )

elif cmd == "dropView":
    if len(args) != 4:
        print("dropView requires 4 args")
        sys.exit(1)
    pp.pprint(
        client.dropView(
            args[0],
            args[1],
            args[2],
            args[3],
        )
    )

else:
    print("Unrecognized method %s" % cmd)
    sys.exit(1)

transport.close()
